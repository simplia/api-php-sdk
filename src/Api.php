<?php

/**
 * !!! AUTOGENERATED FROM OPENAPI SPECIFICATION
 * !!! DON'T EDIT AND DON'T SEND PULL REQUESTS DIRECTLY FOR THIS FILE
 */

namespace Simplia\Api;

use Psr\Http\Client\ClientInterface;
use Simplia\Api\Endpoint\ArticlesApiEndpoint;
use Simplia\Api\Endpoint\AvailabilitiesApiEndpoint;
use Simplia\Api\Endpoint\BundleApiEndpoint;
use Simplia\Api\Endpoint\DocumentsApiEndpoint;
use Simplia\Api\Endpoint\OrdersApiEndpoint;
use Simplia\Api\Endpoint\PackagesApiEndpoint;
use Simplia\Api\Endpoint\PaymentMethodApiEndpoint;
use Simplia\Api\Endpoint\PaymentsApiEndpoint;
use Simplia\Api\Endpoint\ProductsApiEndpoint;
use Simplia\Api\Endpoint\StockItemsApiEndpoint;
use Simplia\Api\Endpoint\StockRoomsApiEndpoint;
use Simplia\Api\Endpoint\TextPagesApiEndpoint;
use Simplia\Api\Endpoint\TransportMethodApiEndpoint;
use Simplia\Api\Endpoint\VariantsApiEndpoint;
use Simplia\Api\Endpoint\VoucherApiEndpoint;
use Simplia\Api\Endpoint\VoucherLockApiEndpoint;
use Simplia\Api\RequestHandler;

final class Api {
    public RequestHandler $client;

    private function __construct(ClientInterface $client, string $host, string $username, string $password) {
        $this->client = new RequestHandler($client, $host, $username, $password);
    }

    public static function withUsernameAuth(
        ClientInterface $client,
        string $hostname,
        string $username,
        string $password
    ): self {
        return new self($client, $hostname, $username, $password);
    }

    final public function getArticlesEndpoint(): Endpoint\ArticlesApiEndpoint {
        return new Endpoint\ArticlesApiEndpoint($this->client);
    }

    final public function getAvailabilitiesEndpoint(): Endpoint\AvailabilitiesApiEndpoint {
        return new Endpoint\AvailabilitiesApiEndpoint($this->client);
    }

    final public function getBundleEndpoint(): Endpoint\BundleApiEndpoint {
        return new Endpoint\BundleApiEndpoint($this->client);
    }

    final public function getDocumentsEndpoint(): Endpoint\DocumentsApiEndpoint {
        return new Endpoint\DocumentsApiEndpoint($this->client);
    }

    final public function getOrdersEndpoint(): Endpoint\OrdersApiEndpoint {
        return new Endpoint\OrdersApiEndpoint($this->client);
    }

    final public function getPackagesEndpoint(): Endpoint\PackagesApiEndpoint {
        return new Endpoint\PackagesApiEndpoint($this->client);
    }

    final public function getPaymentMethodEndpoint(): Endpoint\PaymentMethodApiEndpoint {
        return new Endpoint\PaymentMethodApiEndpoint($this->client);
    }

    final public function getPaymentsEndpoint(): Endpoint\PaymentsApiEndpoint {
        return new Endpoint\PaymentsApiEndpoint($this->client);
    }

    final public function getProductsEndpoint(): Endpoint\ProductsApiEndpoint {
        return new Endpoint\ProductsApiEndpoint($this->client);
    }

    final public function getStockItemsEndpoint(): Endpoint\StockItemsApiEndpoint {
        return new Endpoint\StockItemsApiEndpoint($this->client);
    }

    final public function getStockRoomsEndpoint(): Endpoint\StockRoomsApiEndpoint {
        return new Endpoint\StockRoomsApiEndpoint($this->client);
    }

    final public function getTextPagesEndpoint(): Endpoint\TextPagesApiEndpoint {
        return new Endpoint\TextPagesApiEndpoint($this->client);
    }

    final public function getTransportMethodEndpoint(): Endpoint\TransportMethodApiEndpoint {
        return new Endpoint\TransportMethodApiEndpoint($this->client);
    }

    final public function getVariantsEndpoint(): Endpoint\VariantsApiEndpoint {
        return new Endpoint\VariantsApiEndpoint($this->client);
    }

    final public function getVoucherEndpoint(): Endpoint\VoucherApiEndpoint {
        return new Endpoint\VoucherApiEndpoint($this->client);
    }

    final public function getVoucherLockEndpoint(): Endpoint\VoucherLockApiEndpoint {
        return new Endpoint\VoucherLockApiEndpoint($this->client);
    }
}
