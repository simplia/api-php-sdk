<?php

/**
 * !!! AUTOGENERATED FROM OPENAPI SPECIFICATION
 * !!! DON'T EDIT AND DON'T SEND PULL REQUESTS DIRECTLY FOR THIS FILE
 */

declare(strict_types=1);

namespace Simplia\Api\Endpoint;

use Generator;
use Simplia\Api\Entity\TextPageApiEntity;
use Simplia\Api\FieldConfig\TextPageApiFieldConfig;
use Simplia\Api\Input\TextPageApiInput;
use Simplia\Api\Request\TextPageApiRequest;

class TextPagesApiEndpoint extends AbstractApiEndpoint {
    /**
     * List text pages
     * @param TextPageApiRequest $request
     * @param TextPageApiFieldConfig $fields
     * @param int $batchSize
     * @return Generator|TextPageApiEntity[]
     */
    final public function iterate(
        TextPageApiRequest $request,
        TextPageApiFieldConfig $fields,
        int $batchSize = 100
    ): Generator {
        foreach ($this->iterateList('text-pages', [], $request, $fields, $batchSize) as $row) {
            yield new TextPageApiEntity($row);
        }
        yield from [];
    }

    /**
     * Create new text page
     */
    final public function create(TextPageApiInput $input) {
    }

    /**
     * Get single text page
     */
    final public function get(int $id, TextPageApiFieldConfig $fields): ?TextPageApiEntity {
        $result = $this->singleResult('text-pages/' . $id, [], $fields);

        return $result ? new TextPageApiEntity($result) : null;
    }

    /**
     * Update text page (patch)
     */
    final public function update(
        int $id,
        TextPageApiInput $input,
        ?TextPageApiFieldConfig $fields = null
    ): TextPageApiEntity {
        $result = $this->request('PATCH', 'text-pages/' . $id, [], $input, $fields);

        return new TextPageApiEntity($result);
    }

    /**
     * Delete text page
     */
    final public function delete(int $id): void {
    }
}
